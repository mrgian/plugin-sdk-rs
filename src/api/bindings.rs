/* automatically generated by rust-bindgen 0.69.4 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const PLUGIN_API_VERSION_MAJOR: u32 = 3;
pub const PLUGIN_API_VERSION_MINOR: u32 = 4;
pub const PLUGIN_API_VERSION_PATCH: u32 = 0;
pub const PLUGIN_MAX_ERRLEN: u32 = 1024;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type ss_plugin_bool = u32;
pub const ss_plugin_field_type_FTYPE_UINT64: ss_plugin_field_type = 8;
pub const ss_plugin_field_type_FTYPE_STRING: ss_plugin_field_type = 9;
pub const ss_plugin_field_type_FTYPE_RELTIME: ss_plugin_field_type = 20;
pub const ss_plugin_field_type_FTYPE_ABSTIME: ss_plugin_field_type = 21;
pub const ss_plugin_field_type_FTYPE_BOOL: ss_plugin_field_type = 25;
pub const ss_plugin_field_type_FTYPE_IPADDR: ss_plugin_field_type = 40;
pub const ss_plugin_field_type_FTYPE_IPNET: ss_plugin_field_type = 41;
pub type ss_plugin_field_type = ::std::os::raw::c_uint;
pub const ss_plugin_rc_SS_PLUGIN_SUCCESS: ss_plugin_rc = 0;
pub const ss_plugin_rc_SS_PLUGIN_FAILURE: ss_plugin_rc = 1;
pub const ss_plugin_rc_SS_PLUGIN_TIMEOUT: ss_plugin_rc = -1;
pub const ss_plugin_rc_SS_PLUGIN_EOF: ss_plugin_rc = 2;
pub const ss_plugin_rc_SS_PLUGIN_NOT_SUPPORTED: ss_plugin_rc = 3;
pub type ss_plugin_rc = ::std::os::raw::c_int;
pub const ss_plugin_schema_type_SS_PLUGIN_SCHEMA_NONE: ss_plugin_schema_type = 0;
pub const ss_plugin_schema_type_SS_PLUGIN_SCHEMA_JSON: ss_plugin_schema_type = 1;
pub type ss_plugin_schema_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event {
    pub ts: u64,
    pub tid: u64,
    pub len: u32,
    pub type_: u16,
    pub nparams: u32,
}
#[test]
fn bindgen_test_layout_ss_plugin_event() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_event>(),
        26usize,
        concat!("Size of: ", stringify!(ss_plugin_event))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_event>(),
        1usize,
        concat!("Alignment of ", stringify!(ss_plugin_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nparams) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event),
            "::",
            stringify!(nparams)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event_input {
    pub evt: *const ss_plugin_event,
    pub evtnum: u64,
    pub evtsrc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ss_plugin_event_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_event_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_event_input>(),
        24usize,
        concat!("Size of: ", stringify!(ss_plugin_event_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_event_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_event_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_input),
            "::",
            stringify!(evt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evtnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_input),
            "::",
            stringify!(evtnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evtsrc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_input),
            "::",
            stringify!(evtsrc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_byte_buffer {
    pub len: u32,
    pub ptr: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ss_plugin_byte_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_byte_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_byte_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(ss_plugin_byte_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_byte_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_byte_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_byte_buffer),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_byte_buffer),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ss_plugin_extract_field {
    pub res: ss_plugin_extract_field__bindgen_ty_1,
    pub res_len: u64,
    pub field_id: u32,
    pub field: *const ::std::os::raw::c_char,
    pub arg_key: *const ::std::os::raw::c_char,
    pub arg_index: u64,
    pub arg_present: ss_plugin_bool,
    pub ftype: u32,
    pub flist: ss_plugin_bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ss_plugin_extract_field__bindgen_ty_1 {
    pub str_: *mut *const ::std::os::raw::c_char,
    pub u64_: *mut u64,
    pub u32_: *mut u32,
    pub boolean: *mut ss_plugin_bool,
    pub buf: *mut ss_plugin_byte_buffer,
}
#[test]
fn bindgen_test_layout_ss_plugin_extract_field__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_extract_field__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_extract_field__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_extract_field__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field__bindgen_ty_1),
            "::",
            stringify!(buf)
        )
    );
}
#[test]
fn bindgen_test_layout_ss_plugin_extract_field() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_extract_field> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_extract_field>(),
        64usize,
        concat!("Size of: ", stringify!(ss_plugin_extract_field))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_extract_field>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_extract_field))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(res)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(res_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(field_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_key) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(arg_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(arg_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_present) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(arg_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftype) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flist) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_extract_field),
            "::",
            stringify!(flist)
        )
    );
}
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT8: ss_plugin_state_type = 1;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT16: ss_plugin_state_type = 2;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT32: ss_plugin_state_type = 3;
pub const ss_plugin_state_type_SS_PLUGIN_ST_INT64: ss_plugin_state_type = 4;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT8: ss_plugin_state_type = 5;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT16: ss_plugin_state_type = 6;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT32: ss_plugin_state_type = 7;
pub const ss_plugin_state_type_SS_PLUGIN_ST_UINT64: ss_plugin_state_type = 8;
pub const ss_plugin_state_type_SS_PLUGIN_ST_STRING: ss_plugin_state_type = 9;
pub const ss_plugin_state_type_SS_PLUGIN_ST_BOOL: ss_plugin_state_type = 25;
pub type ss_plugin_state_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union ss_plugin_state_data {
    pub s8: i8,
    pub s16: i16,
    pub s32: i32,
    pub s64: i64,
    pub u8_: u8,
    pub u16_: u16,
    pub u32_: u32,
    pub u64_: u64,
    pub str_: *const ::std::os::raw::c_char,
    pub b: ss_plugin_bool,
}
#[test]
fn bindgen_test_layout_ss_plugin_state_data() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_state_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_state_data>(),
        8usize,
        concat!("Size of: ", stringify!(ss_plugin_state_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_state_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_state_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(s16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(s32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(s64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_state_data),
            "::",
            stringify!(b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_info {
    pub name: *const ::std::os::raw::c_char,
    pub key_type: ss_plugin_state_type,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_info() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_info>(),
        16usize,
        concat!("Size of: ", stringify!(ss_plugin_table_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_info),
            "::",
            stringify!(key_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_fieldinfo {
    pub name: *const ::std::os::raw::c_char,
    pub field_type: ss_plugin_state_type,
    pub read_only: ss_plugin_bool,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_fieldinfo() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_fieldinfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_fieldinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ss_plugin_table_fieldinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_fieldinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_fieldinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fieldinfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fieldinfo),
            "::",
            stringify!(field_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_only) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fieldinfo),
            "::",
            stringify!(read_only)
        )
    );
}
pub type ss_plugin_table_t = ::std::os::raw::c_void;
pub type ss_plugin_table_entry_t = ::std::os::raw::c_void;
pub type ss_plugin_table_field_t = ::std::os::raw::c_void;
pub type ss_plugin_owner_t = ::std::os::raw::c_void;
pub type ss_plugin_t = ::std::os::raw::c_void;
pub type ss_instance_t = ::std::os::raw::c_void;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_FATAL: ss_plugin_log_severity = 1;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_CRITICAL: ss_plugin_log_severity = 2;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_ERROR: ss_plugin_log_severity = 3;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_WARNING: ss_plugin_log_severity = 4;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_NOTICE: ss_plugin_log_severity = 5;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_INFO: ss_plugin_log_severity = 6;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_DEBUG: ss_plugin_log_severity = 7;
pub const ss_plugin_log_severity_SS_PLUGIN_LOG_SEV_TRACE: ss_plugin_log_severity = 8;
pub type ss_plugin_log_severity = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_fields_vtable {
    pub list_table_fields: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            nfields: *mut u32,
        ) -> *mut ss_plugin_table_fieldinfo,
    >,
    pub get_table_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
    pub add_table_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_fields_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_fields_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_fields_vtable>(),
        24usize,
        concat!("Size of: ", stringify!(ss_plugin_table_fields_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_fields_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_fields_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_table_fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable),
            "::",
            stringify!(list_table_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_field) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable),
            "::",
            stringify!(get_table_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_table_field) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable),
            "::",
            stringify!(add_table_field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_fields_vtable_ext {
    pub list_table_fields: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            nfields: *mut u32,
        ) -> *mut ss_plugin_table_fieldinfo,
    >,
    pub get_table_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
    pub add_table_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            name: *const ::std::os::raw::c_char,
            data_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_field_t,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_fields_vtable_ext() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_fields_vtable_ext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_fields_vtable_ext>(),
        24usize,
        concat!("Size of: ", stringify!(ss_plugin_table_fields_vtable_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_fields_vtable_ext>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ss_plugin_table_fields_vtable_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_table_fields) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable_ext),
            "::",
            stringify!(list_table_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_field) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable_ext),
            "::",
            stringify!(get_table_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_table_field) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_fields_vtable_ext),
            "::",
            stringify!(add_table_field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_reader_vtable {
    pub get_table_name: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_table_size:
        ::std::option::Option<unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> u64>,
    pub get_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub read_entry_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            out: *mut ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_reader_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_reader_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_reader_vtable>(),
        32usize,
        concat!("Size of: ", stringify!(ss_plugin_table_reader_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_reader_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_reader_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable),
            "::",
            stringify!(get_table_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable),
            "::",
            stringify!(get_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable),
            "::",
            stringify!(get_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_entry_field) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable),
            "::",
            stringify!(read_entry_field)
        )
    );
}
pub type ss_plugin_table_iterator_state_t = ::std::os::raw::c_void;
pub type ss_plugin_table_iterator_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut ss_plugin_table_iterator_state_t,
        e: *mut ss_plugin_table_entry_t,
    ) -> ss_plugin_bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_reader_vtable_ext {
    pub get_table_name: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_table_size:
        ::std::option::Option<unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> u64>,
    pub get_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub read_entry_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            out: *mut ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub release_table_entry: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub iterate_entries: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            it: ss_plugin_table_iterator_func_t,
            s: *mut ss_plugin_table_iterator_state_t,
        ) -> ss_plugin_bool,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_reader_vtable_ext() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_reader_vtable_ext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_reader_vtable_ext>(),
        48usize,
        concat!("Size of: ", stringify!(ss_plugin_table_reader_vtable_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_reader_vtable_ext>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ss_plugin_table_reader_vtable_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(get_table_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(get_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(get_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_entry_field) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(read_entry_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_table_entry) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(release_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iterate_entries) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_reader_vtable_ext),
            "::",
            stringify!(iterate_entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_writer_vtable {
    pub clear_table:
        ::std::option::Option<unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> ss_plugin_rc>,
    pub erase_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub create_table_entry: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> *mut ss_plugin_table_entry_t,
    >,
    pub destroy_table_entry: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub add_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
            entry: *mut ss_plugin_table_entry_t,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub write_entry_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            in_: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_writer_vtable() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_writer_vtable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_writer_vtable>(),
        48usize,
        concat!("Size of: ", stringify!(ss_plugin_table_writer_vtable))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_writer_vtable>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_writer_vtable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(clear_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).erase_table_entry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(erase_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_table_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(create_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_table_entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(destroy_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_table_entry) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(add_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_entry_field) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable),
            "::",
            stringify!(write_entry_field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_writer_vtable_ext {
    pub clear_table:
        ::std::option::Option<unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> ss_plugin_rc>,
    pub erase_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
    pub create_table_entry: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t) -> *mut ss_plugin_table_entry_t,
    >,
    pub destroy_table_entry: ::std::option::Option<
        unsafe extern "C" fn(t: *mut ss_plugin_table_t, e: *mut ss_plugin_table_entry_t),
    >,
    pub add_table_entry: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            key: *const ss_plugin_state_data,
            entry: *mut ss_plugin_table_entry_t,
        ) -> *mut ss_plugin_table_entry_t,
    >,
    pub write_entry_field: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut ss_plugin_table_t,
            e: *mut ss_plugin_table_entry_t,
            f: *const ss_plugin_table_field_t,
            in_: *const ss_plugin_state_data,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_writer_vtable_ext() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_writer_vtable_ext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_writer_vtable_ext>(),
        48usize,
        concat!("Size of: ", stringify!(ss_plugin_table_writer_vtable_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_writer_vtable_ext>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ss_plugin_table_writer_vtable_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clear_table) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(clear_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).erase_table_entry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(erase_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_table_entry) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(create_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_table_entry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(destroy_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_table_entry) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(add_table_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_entry_field) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_writer_vtable_ext),
            "::",
            stringify!(write_entry_field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_table_input {
    pub name: *const ::std::os::raw::c_char,
    pub key_type: ss_plugin_state_type,
    pub table: *mut ss_plugin_table_t,
    pub reader: ss_plugin_table_reader_vtable,
    pub writer: ss_plugin_table_writer_vtable,
    pub fields: ss_plugin_table_fields_vtable,
    pub reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub writer_ext: *mut ss_plugin_table_writer_vtable_ext,
    pub fields_ext: *mut ss_plugin_table_fields_vtable_ext,
}
#[test]
fn bindgen_test_layout_ss_plugin_table_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_table_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_table_input>(),
        152usize,
        concat!("Size of: ", stringify!(ss_plugin_table_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_table_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_table_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(key_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(reader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reader_ext) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(reader_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writer_ext) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(writer_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields_ext) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_table_input),
            "::",
            stringify!(fields_ext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_init_tables_input {
    pub list_tables: ::std::option::Option<
        unsafe extern "C" fn(
            o: *mut ss_plugin_owner_t,
            ntables: *mut u32,
        ) -> *mut ss_plugin_table_info,
    >,
    pub get_table: ::std::option::Option<
        unsafe extern "C" fn(
            o: *mut ss_plugin_owner_t,
            name: *const ::std::os::raw::c_char,
            key_type: ss_plugin_state_type,
        ) -> *mut ss_plugin_table_t,
    >,
    pub add_table: ::std::option::Option<
        unsafe extern "C" fn(
            o: *mut ss_plugin_owner_t,
            in_: *const ss_plugin_table_input,
        ) -> ss_plugin_rc,
    >,
    pub fields: ss_plugin_table_fields_vtable,
    pub fields_ext: *mut ss_plugin_table_fields_vtable_ext,
}
#[test]
fn bindgen_test_layout_ss_plugin_init_tables_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_init_tables_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_init_tables_input>(),
        56usize,
        concat!("Size of: ", stringify!(ss_plugin_init_tables_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_init_tables_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_init_tables_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_tables) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_tables_input),
            "::",
            stringify!(list_tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_tables_input),
            "::",
            stringify!(get_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add_table) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_tables_input),
            "::",
            stringify!(add_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_tables_input),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields_ext) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_tables_input),
            "::",
            stringify!(fields_ext)
        )
    );
}
pub type ss_plugin_log_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        o: *mut ss_plugin_owner_t,
        component: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
        sev: ss_plugin_log_severity,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_init_input {
    pub config: *const ::std::os::raw::c_char,
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub tables: *const ss_plugin_init_tables_input,
    pub log_fn: ss_plugin_log_fn_t,
}
#[test]
fn bindgen_test_layout_ss_plugin_init_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_init_input> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_init_input>(),
        40usize,
        concat!("Size of: ", stringify!(ss_plugin_init_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_init_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_init_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_input),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_input),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_owner_last_error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_input),
            "::",
            stringify!(get_owner_last_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tables) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_input),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_fn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_init_input),
            "::",
            stringify!(log_fn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_field_extract_input {
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub num_fields: u32,
    pub fields: *mut ss_plugin_extract_field,
    pub table_reader: ss_plugin_table_reader_vtable,
    pub table_reader_ext: *mut ss_plugin_table_reader_vtable_ext,
}
#[test]
fn bindgen_test_layout_ss_plugin_field_extract_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_field_extract_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_field_extract_input>(),
        72usize,
        concat!("Size of: ", stringify!(ss_plugin_field_extract_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_field_extract_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_field_extract_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_owner_last_error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(get_owner_last_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(num_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_reader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(table_reader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_reader_ext) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_field_extract_input),
            "::",
            stringify!(table_reader_ext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_event_parse_input {
    pub owner: *mut ss_plugin_owner_t,
    pub get_owner_last_error: ::std::option::Option<
        unsafe extern "C" fn(o: *mut ss_plugin_owner_t) -> *const ::std::os::raw::c_char,
    >,
    pub table_reader: ss_plugin_table_reader_vtable,
    pub table_writer: ss_plugin_table_writer_vtable,
    pub table_reader_ext: *mut ss_plugin_table_reader_vtable_ext,
    pub table_writer_ext: *mut ss_plugin_table_writer_vtable_ext,
}
#[test]
fn bindgen_test_layout_ss_plugin_event_parse_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_event_parse_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_event_parse_input>(),
        112usize,
        concat!("Size of: ", stringify!(ss_plugin_event_parse_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_event_parse_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_event_parse_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_owner_last_error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(get_owner_last_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_reader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(table_reader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_writer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(table_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_reader_ext) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(table_reader_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_writer_ext) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_event_parse_input),
            "::",
            stringify!(table_writer_ext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ss_plugin_set_config_input {
    pub config: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ss_plugin_set_config_input() {
    const UNINIT: ::std::mem::MaybeUninit<ss_plugin_set_config_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ss_plugin_set_config_input>(),
        8usize,
        concat!("Size of: ", stringify!(ss_plugin_set_config_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ss_plugin_set_config_input>(),
        8usize,
        concat!("Alignment of ", stringify!(ss_plugin_set_config_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ss_plugin_set_config_input),
            "::",
            stringify!(config)
        )
    );
}
pub type ss_plugin_async_event_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        o: *mut ss_plugin_owner_t,
        evt: *const ss_plugin_event,
        err: *mut ::std::os::raw::c_char,
    ) -> ss_plugin_rc,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api {
    pub get_required_api_version:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_init_schema: ::std::option::Option<
        unsafe extern "C" fn(
            schema_type: *mut ss_plugin_schema_type,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            input: *const ss_plugin_init_input,
            rc: *mut ss_plugin_rc,
        ) -> *mut ss_plugin_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(s: *mut ss_plugin_t)>,
    pub get_last_error: ::std::option::Option<
        unsafe extern "C" fn(s: *mut ss_plugin_t) -> *const ::std::os::raw::c_char,
    >,
    pub get_name: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_description:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_contact: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_version: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub __bindgen_anon_1: plugin_api__bindgen_ty_1,
    pub __bindgen_anon_2: plugin_api__bindgen_ty_2,
    pub __bindgen_anon_3: plugin_api__bindgen_ty_3,
    pub __bindgen_anon_4: plugin_api__bindgen_ty_4,
    pub set_config: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            i: *const ss_plugin_set_config_input,
        ) -> ss_plugin_rc,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_1 {
    pub get_id: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub get_event_source:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            params: *const ::std::os::raw::c_char,
            rc: *mut ss_plugin_rc,
        ) -> *mut ss_instance_t,
    >,
    pub close:
        ::std::option::Option<unsafe extern "C" fn(s: *mut ss_plugin_t, h: *mut ss_instance_t)>,
    pub list_open_params: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            rc: *mut ss_plugin_rc,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub get_progress: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            h: *mut ss_instance_t,
            progress_pct: *mut u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub event_to_string: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub next_batch: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            h: *mut ss_instance_t,
            nevts: *mut u32,
            evts: *mut *mut *mut ss_plugin_event,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_plugin_api__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<plugin_api__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plugin_api__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(plugin_api__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin_api__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin_api__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(get_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_event_source) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(get_event_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_open_params) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(list_open_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_progress) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(get_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_to_string) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(event_to_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_batch) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_1),
            "::",
            stringify!(next_batch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_2 {
    pub get_extract_event_types: ::std::option::Option<
        unsafe extern "C" fn(numtypes: *mut u32, s: *mut ss_plugin_t) -> *mut u16,
    >,
    pub get_extract_event_sources:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_fields: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub extract_fields: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
            in_: *const ss_plugin_field_extract_input,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_plugin_api__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<plugin_api__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plugin_api__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(plugin_api__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin_api__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin_api__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_extract_event_types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_2),
            "::",
            stringify!(get_extract_event_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_extract_event_sources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_2),
            "::",
            stringify!(get_extract_event_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_2),
            "::",
            stringify!(get_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extract_fields) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_2),
            "::",
            stringify!(extract_fields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_3 {
    pub get_parse_event_types: ::std::option::Option<
        unsafe extern "C" fn(numtypes: *mut u32, s: *mut ss_plugin_t) -> *mut u16,
    >,
    pub get_parse_event_sources:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub parse_event: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            evt: *const ss_plugin_event_input,
            in_: *const ss_plugin_event_parse_input,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_plugin_api__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<plugin_api__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plugin_api__bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(plugin_api__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin_api__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin_api__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_parse_event_types) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_3),
            "::",
            stringify!(get_parse_event_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_parse_event_sources) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_3),
            "::",
            stringify!(get_parse_event_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_event) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_3),
            "::",
            stringify!(parse_event)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plugin_api__bindgen_ty_4 {
    pub get_async_event_sources:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub get_async_events:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub set_async_event_handler: ::std::option::Option<
        unsafe extern "C" fn(
            s: *mut ss_plugin_t,
            owner: *mut ss_plugin_owner_t,
            handler: ss_plugin_async_event_handler_t,
        ) -> ss_plugin_rc,
    >,
}
#[test]
fn bindgen_test_layout_plugin_api__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<plugin_api__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plugin_api__bindgen_ty_4>(),
        24usize,
        concat!("Size of: ", stringify!(plugin_api__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin_api__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin_api__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_async_event_sources) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_4),
            "::",
            stringify!(get_async_event_sources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_async_events) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_4),
            "::",
            stringify!(get_async_events)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_async_event_handler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api__bindgen_ty_4),
            "::",
            stringify!(set_async_event_handler)
        )
    );
}
#[test]
fn bindgen_test_layout_plugin_api() {
    const UNINIT: ::std::mem::MaybeUninit<plugin_api> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<plugin_api>(),
        224usize,
        concat!("Size of: ", stringify!(plugin_api))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin_api>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin_api))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_required_api_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_required_api_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_init_schema) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_init_schema)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_last_error) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_last_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_description) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_contact) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_contact)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_version) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(get_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_config) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin_api),
            "::",
            stringify!(set_config)
        )
    );
}
